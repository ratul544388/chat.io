generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  email     String   @unique
  password  String?
  image     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  chats   Chat[]   @relation(fields: [chatIds], references: [id])
  chatIds String[] @db.ObjectId

  messages Message[]

  seenMessages   Message[] @relation(name: "SeenBy", fields: [seenMessageIds], references: [id])
  seenMessageIds String[]  @db.ObjectId
  lastActiveAt   DateTime  @default(now())
}

model Chat {
  id   String  @id @default(auto()) @map("_id") @db.ObjectId
  name String?

  isGroup Boolean @default(false)
  image   String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  users         User[]    @relation(fields: [userIds], references: [id])
  userIds       String[]  @db.ObjectId
  messages      Message[]
  lastMessageAt DateTime  @default(now())
}

model Message {
  id      String  @id @default(auto()) @map("_id") @db.ObjectId
  content String?
  media   Media[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id])
  userId String @db.ObjectId

  seenBy    User[]   @relation(name: "SeenBy", fields: [seenByIds], references: [id])
  seenByIds String[] @db.ObjectId

  chat   Chat   @relation(fields: [chatId], references: [id])
  chatId String @db.ObjectId
}

model Media {
  id   String    @id @default(auto()) @map("_id") @db.ObjectId
  type MediaType
  url  String

  message   Message @relation(fields: [messageId], references: [id], onDelete: Cascade)
  messageId String  @db.ObjectId
}

enum MediaType {
  IMAGE
  VIDEO
}
